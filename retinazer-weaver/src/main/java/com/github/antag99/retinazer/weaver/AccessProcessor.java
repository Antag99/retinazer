/*******************************************************************************
 * Copyright (C) 2015 Anton Gustafsson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/
package com.github.antag99.retinazer.weaver;

import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

final class AccessProcessor extends ChainVisitor implements Opcodes {
    private Weaver weaver;

    public AccessProcessor(Weaver weaver) {
        super(ASM5);

        this.weaver = weaver;
    }

    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        return new MethodVisitor(ASM5, super.visitMethod(access, name, desc, signature, exceptions)) {
            @Override
            public void visitFieldInsn(int opcode, String owner, String name, String desc) {
                if (opcode == GETFIELD || opcode == PUTFIELD) {
                    Type fieldOwner = Type.getObjectType(owner);
                    if (fieldOwner.getSort() == Type.OBJECT) {
                        WeaverMetadata metadata = weaver.getMetadata(fieldOwner.getInternalName());
                        if (metadata.componentMetadata != null) { // Is it a component?
                            ComponentProperty property = metadata.componentMetadata.propertiesByName.get(name);
                            if (property != null) { // Ensure the field is not generated by the weaver
                                if (opcode == GETFIELD)
                                    super.visitMethodInsn(INVOKEVIRTUAL, owner, property.getGetterName(), property.getGetterDesc(), false);
                                else
                                    super.visitMethodInsn(INVOKEVIRTUAL, owner, property.getSetterName(), property.getSetterDesc(), false);
                                return; // Don't attempt to access the fields of packed components
                            }
                        }
                    }
                }
                super.visitFieldInsn(opcode, owner, name, desc);
            }
        };
    }
}
