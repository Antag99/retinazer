/*******************************************************************************
 * Retinazer, an entity-component-system framework for Java
 *
 * Copyright (C) 2015-2016 Anton Gustafsson
 *
 * This file is part of Retinazer.
 *
 * Retinazer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Retinazer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Retinazer.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.github.antag99.retinazer.weaver;

import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

final class AccessProcessor extends ChainVisitor implements Opcodes {
    private Weaver weaver;

    public AccessProcessor(Weaver weaver) {
        super(ASM5);

        this.weaver = weaver;
    }

    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        MethodVisitor visitor = super.visitMethod(access, name, desc, signature, exceptions);

        if ((access & ACC_ABSTRACT) != 0)
            return visitor;

        return new MethodVisitor(ASM5, visitor) {
            @Override
            public void visitFieldInsn(int opcode, String owner, String name, String desc) {
                if (opcode == GETFIELD || opcode == PUTFIELD) {
                    Type fieldOwner = Type.getObjectType(owner);
                    if (fieldOwner.getSort() == Type.OBJECT) {
                        WeaverMetadata metadata = weaver.getMetadata(fieldOwner.getInternalName());
                        if (metadata.componentMetadata != null) { // Is it a component?
                            ComponentProperty property = metadata.componentMetadata.propertiesByName.get(name);
                            if (property != null) { // Ensure the field is not generated by the weaver
                                if (opcode == GETFIELD)
                                    super.visitMethodInsn(INVOKEVIRTUAL, owner, property.getGetterName(), property.getGetterDesc(), false);
                                else
                                    super.visitMethodInsn(INVOKEVIRTUAL, owner, property.getSetterName(), property.getSetterDesc(), false);
                                return; // Don't attempt to access the fields of packed components
                            }
                        }
                    }
                }
                super.visitFieldInsn(opcode, owner, name, desc);
            }
        };
    }
}
